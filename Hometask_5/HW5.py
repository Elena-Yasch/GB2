# 1. Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
# Об окончании ввода данных свидетельствует пустая строка.

# my_text = open('my_text.txt', 'w', encoding='utf-8')
# str_list = input("Введите текст: ")
# my_text.writelines(str_list)
# my_text.close()

# 2. Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества строк,
# количества слов в каждой строке.
# with open('hw5.txt', 'r', encoding='utf-8') as f_obj:
#     text = f_obj.readlines()
#     print(text)
#     for i, line in enumerate(text, 1):
#         num = len(line.split())
#         print("Колличество слов в строке:", num)

# 3. Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов.
# Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников.
# Выполнить подсчет средней величины дохода сотрудников.

# with open('hw5-3.txt', 'r', encoding='utf-8') as f_obj:
#     my_list = [item.replace('\n', '') for item in f_obj.readlines()]
#     new_list = [employee.split()[0] for employee in my_list if int(employee.split()[1]) < 20000]
#     print(new_list)

# 4. Создать (не программно) текстовый файл со следующим содержимым:
# One — 1
# Two — 2
# Three — 3
# Four — 4
# Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные.
# При этом английские числительные должны заменяться на русские. Новый блок строк должен записываться в
# новый текстовый файл.

# with open('hw5-4.txt', 'r', encoding='utf-8') as my_file:
#     my_text = [item.replace('\n', '') for item in my_file.readlines()]
#     new_list = [item.replace('One', 'Один').replace('Two', 'Два').replace('Three', 'Три').replace('Four', 'Четыре') for item in my_text]
#     print(new_list)
#
# with open('text.txt', 'w', encoding='utf-8') as new_file:
#     new_file.writelines(new_list)

# 5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами.
# Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.

with open('num_file.txt', 'w', encoding='utf-8') as new_file:
    num_list = ['1 2 3 4 5 6 7 8 9']
    new_file.writelines(num_list)

with open('num_file.txt', 'r', encoding='utf-8') as new_2file:
    num = new_2file.readlines()[0]
    new_2list = [int(elm) for elm in num.split()]
    print(sum(new_2list))

# 6. Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие
# лекционных, практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы для каждого
# предмета не обязательно были все типы занятий. Сформировать словарь, содержащий название предмета и общее
# количество занятий по нему. Вывести словарь на экран.
# Примеры строк файла:
# Информатика: 100(л) 50(пр) 20(лаб).
# Физика: 30(л) — 10(лаб)
# Физкультура: — 30(пр) —
#
# Пример словаря:
# {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}
#
# 7. Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме: название,
# форма собственности, выручка, издержки.
# Пример строки файла: firm_1 ООО 10000 5000.
# Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма
# получила убытки, в расчет средней прибыли ее не включать. Далее реализовать список. Он должен содержать словарь
# с фирмами и их прибылями, а также словарь со средней прибылью. Если фирма получила убытки, также добавить ее
# в словарь (со значением убытков).
# Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
# Итоговый список сохранить в виде json-объекта в соответствующий файл.
# Пример json-объекта:
# [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
#
# Подсказка: использовать менеджеры контекста.